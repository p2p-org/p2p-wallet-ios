name: Create feature build

on:
  workflow_call:
    inputs:
      with_high_priority:
        required: true
        type: boolean
      move_to_rft:
        required: true
        type: boolean
      lane:
        required: true
        type: string
      branch:
        required: false
        type: string

jobs:
  upload_build_for_testing:
    name: Manually upload build for testing
    runs-on: ${{ (inputs.with_high_priority && fromJSON('[ "self-hosted", "macOS" ]')) || 'macos-13' }} 
    steps:

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.3'

      - name: Cleanup build folder
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Check out current branch
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch != '' && inputs.branch || github.event.pull_request.head.ref }}
          # submodules: recursive
          # token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get last changes
        id: get-changelog
        shell: bash
        run: |
          echo "GIT_CHANGES=$(git log --oneline -n 15)" >> $GITHUB_ENV

      - name: Copy xcconfig file
        run: |
          curl -o ./p2p_wallet/Config.xcconfig ${{ secrets.XCCONFIG_URL }}
        shell: bash

      - name: Ensure Cache folder
        run: mkdir -p /Users/runner/Library/Caches/org.swift.swiftpm/

      - uses: actions/cache@v3
        with:
          path: /Users/runner/Library/Caches/org.swift.swiftpm/
          key: ${{ runner.os }}-spmc-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spmc-

      - name: Install project
        run: |
          chmod u+x Scripts/install.sh && Scripts/install.sh
        shell: bash

      - name: Upload to test
        uses: maierj/fastlane-action@v2.2.0
        with:
          lane: ${{ inputs.lane }}
        env:
          DEVELOPER_APP_IDENTIFIER: '${{ secrets.DEVELOPER_APP_IDENTIFIER }}'
          APP_STORE_CONNECT_TEAM_ID: '${{ secrets.APP_STORE_CONNECT_TEAM_ID }}'
          DEVELOPER_PORTAL_TEAM_ID: '${{ secrets.DEVELOPER_PORTAL_TEAM_ID }}'
          DEVELOPER_APP_ID: '${{ secrets.DEVELOPER_APP_ID }}'
          DEVELOPER_APP_ID_TEST: '${{ secrets.DEVELOPER_APP_ID_TEST }}'
          PROVISIONING_PROFILE_SPECIFIER_ADHOC: '${{ secrets.PROVISIONING_PROFILE_SPECIFIER_ADHOC }}'
          PROVISIONING_PROFILE_SPECIFIER_APPSTORE: '${{ secrets.PROVISIONING_PROFILE_SPECIFIER_APPSTORE }}'
          APPLE_ISSUER_ID: '${{ secrets.APPLE_ISSUER_ID }}'
          PROVISIONING_REPO: '${{ secrets.PROVISIONING_REPO }}'
          FIREBASE_APP_ID: '${{ secrets.FIREBASE_APP_ID }}'
          FIREBASE_APP_ID_TEST: '${{ secrets.FIREBASE_APP_ID_TEST }}'
          FIREBASE_CLI_TOKEN: '${{ secrets.FIREBASE_CLI_TOKEN }}'
          BROWSERSTACK_USERNAME: '${{ secrets.BROWSERSTACK_USERNAME }}'
          BROWSERSTACK_ACCESS_KEY: '${{ secrets.BROWSERSTACK_ACCESS_KEY }}'
          FASTLANE_APPLE_ID: '${{ secrets.FASTLANE_APPLE_ID }}'
          TEMP_KEYCHAIN_USER: '${{ secrets.TEMP_KEYCHAIN_USER }}'
          TEMP_KEYCHAIN_PASSWORD: '${{ secrets.TEMP_KEYCHAIN_PASSWORD }}'
          APPLE_KEY_ID: '${{ secrets.APPLE_KEY_ID }}'
          APPLE_KEY_CONTENT: '${{ secrets.APPLE_KEY_CONTENT }}'
          GIT_AUTHORIZATION: '${{ secrets.GIT_AUTHORIZATION }}'
          MATCH_PASSWORD: '${{ secrets.MATCH_PASSWORD }}'
          IS_CI: '${{ secrets.IS_CI }}'
          SLACK_API_TOKEN: '${{ secrets.SLACK_API_TOKEN }}'
          JIRA_BASE_URL: '${{ secrets.JIRA_BASE_URL }}'
          XCCONFIG_URL: '${{ secrets.XCCONFIG_URL }}'
          GIT_CHANGELOG: '${{ env.GIT_CHANGES }}'
          SENTRY_TOKEN: '${{ secrets.SENTRY_TOKEN }}'
          BROWSERSTACK_USERNAME_NEW: '${{ secrets.BROWSERSTACK_USERNAME_NEW }}'
          BROWSERSTACK_ACCESS_KEY_NEW: '${{ secrets.BROWSERSTACK_ACCESS_KEY_NEW }}'
    
      - name: Login to JIRA
        uses: atlassian/gajira-login@master
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          
      - name: Find JIRA issue from branchname
        id: find_issue
        if: ${{ env.BRANCH_NAME }}
        uses: atlassian/gajira-find-issue-key@master
        with:
          string: ${{ env.BRANCH_NAME }}
          from: ""

      - name: Comment on issue
        if: ${{ steps.find_issue.outputs.issue }}
        uses: atlassian/gajira-comment@master
        with:
          issue: ${{ steps.find_issue.outputs.issue }}
          comment: "A build ${{ env.BUILD_NUMBER }} added for testing this issue"

      - name: Move issue to READY FOR TESTING
        if: ${{ inputs.move_to_rft && steps.find_issue.outputs.issue }}
        uses: atlassian/gajira-transition@master
        with:
          issue: ${{ steps.find_issue.outputs.issue }}
          transition: ${{ secrets.JIRA_READY_FOR_TESTING_TRANSITION_NAME }}
