default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]

FIREBASE_APP_ID = ENV["FIREBASE_APP_ID"]
FIREBASE_CLI_TOKEN = ENV["FIREBASE_CLI_TOKEN"]

BROWSERSTACK_USERNAME = ENV["BROWSERSTACK_USERNAME"]
BROWSERSTACK_ACCESS_KEY = ENV["BROWSERSTACK_ACCESS_KEY"]

PROVISIONING_REPO = ENV["PROVISIONING_REPO"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

def create_release_build(match_type)
  ensure_temp_keychain(TEMP_KEYCHAIN_USER, TEMP_KEYCHAIN_PASSWORD)

  api_key = app_store_connect_api_key(
    key_id: APPLE_KEY_ID,
    issuer_id: APPLE_ISSUER_ID,
    key_content: APPLE_KEY_CONTENT,  
    duration: 1200,  
    in_house: false
  )
  
  increment_build_number(
    xcodeproj: "p2p_wallet.xcodeproj", 
    skip_info_plist: true
  )
  
  cocoapods(
    clean_install: true
  )

  match(
    type: match_type,
    git_url: PROVISIONING_REPO,
    app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
    git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
    readonly: true,
    keychain_name: TEMP_KEYCHAIN_USER,
    keychain_password: TEMP_KEYCHAIN_PASSWORD,
    api_key: api_key
  )

  gym(scheme: 'p2p_wallet', export_method: 'ad-hoc', export_xcargs: '-allowProvisioningUpdates')
end 

def commit_changes
  version = get_version_number
  build = get_build_number
  git_commit(path: ["p2p_wallet.xcodeproj/project.pbxproj"], message: "release(beta): version #{version}, build #{build}")
  add_git_tag(tag: "v#{version}(#{build})")
end 

platform :ios do
  lane :beta do
    create_release_build('adhoc')
    
    # upload to firebase
    firebase_app_distribution(
      app: FIREBASE_APP_ID,
      groups: "dev_team",
      firebase_cli_token: FIREBASE_CLI_TOKEN
    )    

    # upload to browserstack
    upload_to_browserstack_app_live(
      browserstack_username: BROWSERSTACK_USERNAME,
      browserstack_access_key: BROWSERSTACK_ACCESS_KEY,
    )

    # delete temp keychain
    delete_temp_keychain(TEMP_KEYCHAIN_USER)
    
    # commit
    commit_changes
  end 

  lane :closed_beta do
    create_release_build

    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "./p2p_wallet.ipa"
    )

    delete_temp_keychain(TEMP_KEYCHAIN_USER)

    # commit
    commit_changes
  end
end
