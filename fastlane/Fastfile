default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_ID_TEST = ENV["DEVELOPER_APP_ID_TEST"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER_ADHOC = ENV["PROVISIONING_PROFILE_SPECIFIER_ADHOC"]
PROVISIONING_PROFILE_SPECIFIER_APPSTORE = ENV["PROVISIONING_PROFILE_SPECIFIER_APPSTORE"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]

FIREBASE_APP_ID = ENV["FIREBASE_APP_ID"]
FIREBASE_APP_ID_TEST = ENV["FIREBASE_APP_ID_TEST"]
FIREBASE_CLI_TOKEN = ENV["FIREBASE_CLI_TOKEN"]

BROWSERSTACK_USERNAME = ENV["BROWSERSTACK_USERNAME"]
BROWSERSTACK_ACCESS_KEY = ENV["BROWSERSTACK_ACCESS_KEY"]

BROWSERSTACK_USERNAME_NEW = ENV["BROWSERSTACK_USERNAME_NEW"]
BROWSERSTACK_ACCESS_KEY_NEW = ENV["BROWSERSTACK_ACCESS_KEY_NEW"]

PROVISIONING_REPO = ENV["PROVISIONING_REPO"]
IS_CI = ENV["IS_CI"] == "true"

APP_STORE_CONNECT_TEAM_ID = ENV["APP_STORE_CONNECT_TEAM_ID"]
DEVELOPER_PORTAL_TEAM_ID = ENV["DEVELOPER_PORTAL_TEAM_ID"]

SLACK_API_TOKEN = ENV["SLACK_API_TOKEN"]
JIRA_BASE_URL = ENV["JIRA_BASE_URL"]

GIT_CHANGELOG = ENV["GIT_CHANGELOG"]

SENTRY_TOKEN = ENV["SENTRY_TOKEN"]

NEW_DEVICES_JSON_STRING = ENV["NEW_DEVICES_JSON_STRING"]

IS_RELEASE_CANDIDATE = ENV["IS_RELEASE_CANDIDATE"] == 'true'

SPM_CACHE_HIT = ENV["SPM_CACHE_HIT"] == 'true'

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: true,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

def create_release_build(match_type, configuration)
  ensure_temp_keychain(TEMP_KEYCHAIN_USER, TEMP_KEYCHAIN_PASSWORD)

  profileSpecifier = PROVISIONING_PROFILE_SPECIFIER_ADHOC
  if match_type == "app-store"
    profileSpecifier = PROVISIONING_PROFILE_SPECIFIER_APPSTORE
  end

  if configuration == "Test"
    profileSpecifier += ".test"
  end

  appId = DEVELOPER_APP_ID
  if configuration == "Test"
    appId = DEVELOPER_APP_ID_TEST
  end

  appIdentifier = DEVELOPER_APP_IDENTIFIER
  if configuration == "Test"
    appIdentifier += ".test"
  end

  if IS_CI
    update_code_signing_settings(
      use_automatic_signing: false,
      profile_name: profileSpecifier,
      team_id: DEVELOPER_PORTAL_TEAM_ID,
      code_sign_identity: "Apple Distribution"
    )
  end

  api_key = app_store_connect_api_key(
    key_id: APPLE_KEY_ID,
    issuer_id: APPLE_ISSUER_ID,
    key_content: APPLE_KEY_CONTENT,
    is_key_content_base64: true,
    duration: 1200,
    in_house: false
  )

  match(
    type: match_type.gsub("-", ""),
    git_url: PROVISIONING_REPO,
    app_identifier: "#{appIdentifier}",
    git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
    readonly: false,
    keychain_name: TEMP_KEYCHAIN_USER,
    keychain_password: TEMP_KEYCHAIN_PASSWORD,
    api_key: api_key
  )

  if IS_CI
    gym(
      scheme: 'p2p_wallet',
      configuration: configuration,
      export_method: match_type,
      export_xcargs: '-allowProvisioningUpdates',
      silent: false,
      export_options: {
        provisioningProfiles: {
          appId => profileSpecifier
        }
      },
      cloned_source_packages_path: "SourcePackages", # the difference
      skip_package_dependencies_resolution: SPM_CACHE_HIT, # the difference
      # disable_package_automatic_updates: SPM_CACHE_HIT, # the difference
    )
  else
    gym(
      scheme: 'p2p_wallet',
      configuration: configuration,
      export_method: match_type,
      export_xcargs: '-allowProvisioningUpdates',
      silent: false,
      export_options: {
        provisioningProfiles: {
          appId => profileSpecifier
        }
      }
    )
  end
end

def upload_build(configuration, browserstack_username, browserstack_access_key, custom_id)
  # upload to firebase
  firebaseAppId = FIREBASE_APP_ID
  if configuration == "Test"
    firebaseAppId = FIREBASE_APP_ID_TEST
  end
  firebase_app_distribution(
    app: firebaseAppId,
    groups: "dev_team",
    firebase_cli_token: FIREBASE_CLI_TOKEN,
    release_notes: GIT_CHANGELOG
  )

  # upload to browserstack
  if custom_id.nil?
    upload_to_browserstack_app_live(
      browserstack_username: browserstack_username,
      browserstack_access_key: browserstack_access_key
    )
  else
    upload_to_browserstack_app_automate(
      browserstack_username: browserstack_username,
      browserstack_access_key: browserstack_access_key,
      custom_id: custom_id
    )
  end
  
end 

def notify(version, message)
  # upload to slack
  slack_upload(
    slack_api_token: SLACK_API_TOKEN,
    title: "PWN-#{version}.ipa",
    channel: "#p2p-wallet-builds-ios",
    file_path: "./p2p_wallet.ipa",
    initial_comment: message
  )
end

def commit_changes
  version = get_version_number(target: "p2p_wallet")
  build = get_build_number
  git_commit(path: ["p2p_wallet.xcodeproj/project.pbxproj"], message: "release(beta): version #{version}, build #{build}")
  tag_name = "v#{version}(#{build})"
  add_git_tag(tag: tag_name)
  push_git_tags(tag: tag_name)
end 

def update_xcconfig
  config_url = "../p2p_wallet/Config.xcconfig"
  sh("curl", "-o", config_url, ENV['XCCONFIG_URL'])
end

def upload_dsym_to_analytic_providers
  sentry_upload_dsym(
    auth_token: SENTRY_TOKEN,
    org_slug: 'p2p-wallet',
    project_slug: 'ios',
  )
end

def upload_test(build_prefix, tag_prefix, browserstack_username, browserstack_access_key, custom_id)
  # update xcconfig
  update_xcconfig

  # get number of builds released of this feature
  number_of_released_builds = 0
  build_number = number_of_released_builds + 1
  current_build = build_prefix.to_s + "." + build_number.to_s # pwn-1234, released 1 build -> builds/feature_test/1234.2
  while git_tag_exists(tag: "#{tag_prefix}/#{current_build}", remote: true)
    build_number += 1
    current_build = build_prefix.to_s + "." + build_number.to_s
  end

  # set build number
  increment_build_number(
    xcodeproj: "p2p_wallet.xcodeproj",
    build_number: current_build,
    skip_info_plist: true
  )

  # change app name
  update_info_plist( # Change the Display Name of your app
    plist_path: "./p2p_wallet/Info.plist",
    display_name: "PW #{current_build}"
  )

  # create release build for this feature
  create_release_build('ad-hoc', 'Test')

  # upload dsym
  upload_dsym_to_analytic_providers

  # upload to firebase and browser stack
  upload_build("Test", browserstack_username, browserstack_access_key, custom_id)

  # delete temp keychain
  delete_temp_keychain(TEMP_KEYCHAIN_USER)

  # tag
  tag_name = "#{tag_prefix}/#{current_build}"
  add_git_tag(tag: tag_name)
  push_git_tags(tag: tag_name)

  # return version
  return current_build
end

platform :ios do
  lane :feature_test do
    # get current branch name
    branch = git_branch.downcase
    puts "Current branch is #{branch}"
     
    # check if branch is a feature branch
    if !branch.include?("pwn-")
      puts "The branch is not a feature branch. Skipping..."
      next
    end

    # get feature number
    feature_number = branch.split("pwn-").last.split("-").first.to_i
    puts "Got the feature number: #{feature_number}"

    # check feature number
    if feature_number <= 0
      puts "The feature number is not valid. Skipping..."
      next
    end

    # upload test build
    version = upload_test(
      feature_number, # build prefix
      "builds/feature_test", # tag prefix
      BROWSERSTACK_USERNAME,
      BROWSERSTACK_ACCESS_KEY,
      nil
    )

    # notify tester
    message = "A build #{version} was uploaded for testing this feature. Link to issue: #{JIRA_BASE_URL}/browse/PWN-#{feature_number.to_s}"
    notify(version, message)

    # output
    if IS_CI
      sh("echo BRANCH_NAME=#{branch} >> $GITHUB_ENV")
      sh("echo BUILD_NUMBER=#{version} >> $GITHUB_ENV")
    end
  end

  lane :release do
    # update xcconfig
    update_xcconfig

    # get current branch name
    branch = git_branch.downcase
    puts "Current branch is #{branch}"

    # check if branch is a release branch
    if !branch.start_with?("release/")
      raise "The branch is not a release branch. Release branch format: release/<MARKETING_VERSION>"
    end

    # get release version
    version = branch.split("release/").last
    puts "Releasing version #{version}"

    # check feature number
    version_updated = false
    if version != get_version_number(target: "p2p_wallet")
      puts "The version number is not valid. Updating..."

      # update project.yml
      file_name = "project.yml"
      text = File.read("../#{file_name}")
      new_contents = text.gsub(/MARKETING_VERSION: .*/, "MARKETING_VERSION: #{version}")
      File.open("../#{file_name}", "w") {|file| file.puts new_contents }

      # commit and push
      version_updated = true
      
      # update xcodeproj file
      increment_version_number(
        version_number: version,
        xcodeproj: "./p2p_wallet.xcodeproj"
      )
    end

    # prepare for tagging
    tag_prefix = "v"

    # find available build number via tags
    build_number = 1
    tag = "#{tag_prefix}#{version}(#{build_number})"
    while git_tag_exists(tag: tag, remote: true)
      build_number += 1
      tag = "#{tag_prefix}#{version}(#{build_number})"
    end

    # set build number
    increment_build_number(
      xcodeproj: "p2p_wallet.xcodeproj",
      build_number: build_number,
      skip_info_plist: true
    )

    # create release build
    create_release_build('app-store', 'Release')
    upload_dsym_to_analytic_providers

    # upload to testflight
    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "./p2p_wallet.ipa"
    )

    # upload to browserstack
    if IS_RELEASE_CANDIDATE
      upload_to_browserstack_app_automate(
        browserstack_username: BROWSERSTACK_USERNAME_NEW,
        browserstack_access_key: BROWSERSTACK_ACCESS_KEY_NEW,
        custom_id: "KeyApp_rc.ipa"
      )
    end

    # post to slack
    full_version = "#{version} (#{build_number})"
    post_to_slack(
      api_token: SLACK_API_TOKEN,
      message: "Version #{full_version} was uploaded to Testflight and will be available after a few minutes!",
      channel: "#p2p-wallet-builds-ios"
    )

    # clean
    delete_temp_keychain(TEMP_KEYCHAIN_USER)

    # commit, tag and push
    if version_updated
      git_commit(path: "./project.yml", message: "release: bump version to #{version}")
      push_to_git_remote()
    end
    add_git_tag(tag: tag)
    push_git_tags(tag: tag)
  end

  lane :daily_test do
    # get current branch name
    branch = git_branch.downcase
    puts "Current branch is #{branch}"
     
    # check if branch is develop
    if branch != "develop"
      puts "The branch is not develop. Skipping..."
      next
    end

    # get current date
    time = Time.now.to_s
    date = DateTime.parse(time).strftime("%y%m%d")

    # upload test build
    version = upload_test(
      date, # build prefix
      "builds/daily_test", # tag prefix
      BROWSERSTACK_USERNAME_NEW,
      BROWSERSTACK_ACCESS_KEY_NEW,
      "KeyApp_dev.ipa"
    )

    # notify tester
    message = "A daily build #{version} was uploaded."
    notify(version, message)
  end

  lane :add_devices do
    # register new device
    devices = {}

    JSON.parse(NEW_DEVICES_JSON_STRING).map do |obj|
      devices[obj[:name]] = obj[:id]
    end

    # register devices
    register_devices(
      devices: devices
    )

    # match
    match(
      type: "adhoc",
      git_url: PROVISIONING_REPO,
      app_identifier: "#{appIdentifier}",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: false,
      keychain_name: TEMP_KEYCHAIN_USER,
      keychain_password: TEMP_KEYCHAIN_PASSWORD,
      api_key: api_key, 
      force_for_new_devices: true
    )
  end
end
