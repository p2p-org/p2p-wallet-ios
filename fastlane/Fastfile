default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER_ADHOC = ENV["PROVISIONING_PROFILE_SPECIFIER_ADHOC"]
PROVISIONING_PROFILE_SPECIFIER_APPSTORE = ENV["PROVISIONING_PROFILE_SPECIFIER_APPSTORE"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]

FIREBASE_APP_ID = ENV["FIREBASE_APP_ID"]
FIREBASE_CLI_TOKEN = ENV["FIREBASE_CLI_TOKEN"]

BROWSERSTACK_USERNAME = ENV["BROWSERSTACK_USERNAME"]
BROWSERSTACK_ACCESS_KEY = ENV["BROWSERSTACK_ACCESS_KEY"]

PROVISIONING_REPO = ENV["PROVISIONING_REPO"]
IS_CI = ENV["IS_CI"] == "true"

APP_STORE_CONNECT_TEAM_ID = ENV["APP_STORE_CONNECT_TEAM_ID"]
DEVELOPER_PORTAL_TEAM_ID = ENV["DEVELOPER_PORTAL_TEAM_ID"]

SLACK_API_TOKEN = ENV["SLACK_API_TOKEN"]
JIRA_BASE_URL = ENV["JIRA_BASE_URL"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: true,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

def create_release_build(match_type)
  ensure_temp_keychain(TEMP_KEYCHAIN_USER, TEMP_KEYCHAIN_PASSWORD)

  profileSpecifier = PROVISIONING_PROFILE_SPECIFIER_ADHOC
  if match_type == "app-store"
    profileSpecifier = PROVISIONING_PROFILE_SPECIFIER_APPSTORE
  end

  if IS_CI
    update_code_signing_settings(
      use_automatic_signing: false,
      profile_name: profileSpecifier,
      team_id: DEVELOPER_PORTAL_TEAM_ID,
      code_sign_identity: "Apple Distribution"
    )
  end

  api_key = app_store_connect_api_key(
    key_id: APPLE_KEY_ID,
    issuer_id: APPLE_ISSUER_ID,
    key_content: APPLE_KEY_CONTENT,
    is_key_content_base64: true,
    duration: 1200,
    in_house: false
  )

  match(
    type: match_type.gsub("-", ""),
    git_url: PROVISIONING_REPO,
    app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
    git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
    readonly: true,
    keychain_name: TEMP_KEYCHAIN_USER,
    keychain_password: TEMP_KEYCHAIN_PASSWORD,
    api_key: api_key
  )

  gym(
    scheme: 'p2p_wallet',
    export_method: match_type,
    export_xcargs: '-allowProvisioningUpdates',
    silent: true,
    export_options: {
      provisioningProfiles: {
        DEVELOPER_APP_ID => profileSpecifier
      }
    }
  )
end

def upload_build(version, is_feature_build, link)
  # upload to firebase
  firebase_app_distribution(
    app: FIREBASE_APP_ID,
    groups: "dev_team",
    firebase_cli_token: FIREBASE_CLI_TOKEN
  )

  # upload to browserstack
  upload_to_browserstack_app_live(
    browserstack_username: BROWSERSTACK_USERNAME,
    browserstack_access_key: BROWSERSTACK_ACCESS_KEY
  )

  # upload to slack
  message = "New version #{version} for regression is available"
  if is_feature_build
    message = "A build #{version} was uploaded for testing this feature. Link to issue: #{link}"
  end
  slack_upload(
    slack_api_token: SLACK_API_TOKEN,
    title: "p2p_wallet.ipa",
    channel: "#p2p-wallet-builds-ios",
    file_path: "./p2p_wallet.ipa",
    initial_comment: message
  )
end 

def commit_changes
  version = get_version_number(target: "p2p_wallet")
  build = get_build_number
  git_commit(path: ["p2p_wallet.xcodeproj/project.pbxproj"], message: "release(beta): version #{version}, build #{build}")
  tag_name = "v#{version}(#{build})"
  add_git_tag(tag: tag_name)
  push_git_tags(tag: tag_name)
end 

platform :ios do
  lane :feature_test do
    # get current branch name
    branch = git_branch.downcase
    puts "Current branch is #{branch}"
     
    # check if branch is a feature branch
    if !branch.include?("pwn-")
      puts "The branch is not a feature branch. Skipping..."
      next
    end

    # get feature number
    feature_number = branch.split("pwn-").last.split("-").first.to_i
    puts "Got the feature number: #{feature_number}"

    # check feature number
    if feature_number <= 0
      puts "The feature number is not valid. Skipping..."
      next
    end

    # prepare for tagging
    tag_prefix = "builds/feature_test"

    # get number of builds released of this feature
    number_of_released_builds = 0
    build_number = number_of_released_builds + 1
    current_build = feature_number.to_s + "." + build_number.to_s # pwn-1234, released 1 build -> builds/feature_test/1234.2
    while git_tag_exists(tag: "#{tag_prefix}/#{current_build}", remote: true)
      build_number += 1
      current_build = feature_number.to_s + "." + build_number.to_s
    end

    puts "Set build number to #{current_build}"

    # set build number
    increment_build_number(
      xcodeproj: "p2p_wallet.xcodeproj",
      build_number: current_build,
      skip_info_plist: true
    )

    # create release build for this feature
    create_release_build('ad-hoc')

    # upload to firebase and browser stack
    upload_build(current_build, true, "#{JIRA_BASE_URL}/browse/PWN-#{feature_number.to_s}")

    # delete temp keychain
    delete_temp_keychain(TEMP_KEYCHAIN_USER)

    # tag
    tag_name = "#{tag_prefix}/#{current_build}"
    add_git_tag(tag: tag_name)
    push_git_tags(tag: tag_name)

    # reset file
    reset_git_repo(
      force: true,
      files: [
        "p2p_wallet.xcodeproj/project.pbxproj"
      ]
    )

    # output
    if IS_CI
      sh("echo BRANCH_NAME=#{branch} >> $GITHUB_ENV")
      sh("echo BUILD_NUMBER=#{current_build} >> $GITHUB_ENV")
    end
  end

  lane :beta do
    # get version
    version = get_version_number(target: "p2p_wallet")

    # prepare for tagging
    tag_prefix = "v"

    # find available build number via tags
    build_number = 1
    tag = "#{tag_prefix}#{version}(#{build_number})"
    while git_tag_exists(tag: tag, remote: true)
      build_number += 1
      tag = "#{tag_prefix}#{version}(#{build_number})"
    end

    # set build number
    increment_build_number(
      xcodeproj: "p2p_wallet.xcodeproj",
      build_number: build_number,
      skip_info_plist: true
    )

    # create release build
    create_release_build('ad-hoc')

    # upload to firebase
    upload_build("#{version} (#{build_number})", false, "")

    # delete temp keychain
    delete_temp_keychain(TEMP_KEYCHAIN_USER)

    # tag
    add_git_tag(tag: tag)
    push_git_tags(tag: tag)

    # reset file
    reset_git_repo(
      force: true,
      files: [
        "p2p_wallet.xcodeproj/project.pbxproj"
      ]
    )
  end

  lane :release do
    # REQUIREMENT: THERE IS AT LEAST 1 TAG LIKE v1.0.0(1234) THAT HAS ALREADY BEEN PASSED REGRESSION

    # get current build number. Ex. get 1234 from tag v1.0.0(1234)
    sh('git fetch --tags --no-recurse-submodules')
    version = get_version_number(target: "p2p_wallet")
    lt = last_git_tag
    puts "last_git_tag #{lt}"
    tag = last_git_tag(pattern: "v#{version}(*")
    puts "matched tag #{tag}"
    build_number = tag.sub("v#{version}(", '').sub(")", '')

    # set build number
    increment_build_number(
      xcodeproj: "p2p_wallet.xcodeproj",
      build_number: build_number,
      skip_info_plist: true
    )

    # create release build
    create_release_build('app-store')

    # upload to testflight
    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "./p2p_wallet.ipa"
    )

    # post to slack
    full_version = "#{version} (#{build_number})"
    post_to_slack(
      api_token: SLACK_API_TOKEN,
      message: "Version #{full_version} was uploaded to Testflight and will be available for updating test after a few minutes!",
      channel: "#p2p-wallet-builds-ios"
    )

    # clean
    delete_temp_keychain(TEMP_KEYCHAIN_USER)

    # reset file
    reset_git_repo(
      force: true,
      files: [
        "p2p_wallet.xcodeproj/project.pbxproj"
      ]
    )
  end
end
